#!/usr/bin/env bash
set -euo pipefail

ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$ROOT"
git rev-parse --git-dir >/dev/null 2>&1 || { echo "❌ Not a git repo"; exit 1; }

BRANCH="ops-autopay-$(date +%Y%m%d-%H%M%S)"
git checkout -b "$BRANCH" >/dev/null 2>&1 || git checkout "$BRANCH"

mkdir -p .github/workflows scripts .github
[[ -f .github/contributors.json ]] || echo '{}' > .github/contributors.json

# ---------- Helper: set Stripe secret + enable switch ----------
cat > scripts/stripe_setup.sh <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
if ! command -v gh >/dev/null; then echo "Install GitHub CLI: brew install gh"; exit 1; fi
if [[ -z "${1:-}" ]]; then echo "Usage: $0 sk_live_xxx  [true|false enable payouts now?]"; exit 1; fi
KEY="$1"; ENABLE="${2:-false}"
gh secret set STRIPE_SECRET_KEY -b"$KEY"
gh variable set STRIPE_PAYOUTS_ENABLED -b"${ENABLE}"
echo "✅ Set STRIPE_SECRET_KEY (secret) and STRIPE_PAYOUTS_ENABLED=${ENABLE} (variable)."
echo "   NOTE: money ONLY moves when STRIPE_PAYOUTS_ENABLED == 'true'."
EOS
chmod +x scripts/stripe_setup.sh

# ---------- Auto-onboard on issue open (label: onboarding) ----------
cat > .github/workflows/auto_onboard_from_issue.yml <<'YAML'
name: Auto onboard from "Join program" issue
on:
  issues:
    types: [opened, labeled]
permissions:
  contents: write
  issues: write
jobs:
  onboard:
    if: |
      contains(github.event.issue.labels.*.name, 'onboarding')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y jq
      - name: Parse form fields
        id: parse
        run: |
          TITLE="${{ github.event.issue.title }}"
          BODY=$(jq -r '.issue.body' <<<"${{ toJson(github.event) }}")
          # Extract YAML-form issue answers (common formats)
          email=$(printf "%s" "$BODY" | sed -nE 's/.*Contact email.*\n\n([^ \n]+).*/\1/p' | head -1)
          stripe=$(printf "%s" "$BODY" | sed -nE 's/.*Stripe account email.*\n\n([^ \n]+).*/\1/p' | head -1)
          country=$(printf "%s" "$BODY" | sed -nE 's/.*Country.*\n\n([^ \n]+).*/\1/p' | head -1)
          # Fallbacks
          [[ -z "$email" ]] && email="${{ github.event.issue.user.login }}@users.noreply.github.com"
          [[ -z "$country" ]] && country="US"
          gh_user="${{ github.event.issue.user.login }}"
          echo "email=$email"   >> $GITHUB_OUTPUT
          echo "stripe=$stripe" >> $GITHUB_OUTPUT
          echo "country=$country" >> $GITHUB_OUTPUT
          echo "gh_user=$gh_user" >> $GITHUB_OUTPUT
      - name: Ensure mapping file
        run: test -f .github/contributors.json || echo '{}' > .github/contributors.json
      - name: Lookup mapping
        id: map
        run: |
          ACCT=$(jq -r --arg gh "${{ steps.parse.outputs.gh_user }}" '.[$gh] // empty' .github/contributors.json)
          echo "acct=$ACCT" >> $GITHUB_OUTPUT
      - name: Create Stripe account if missing
        id: acct
        if: steps.map.outputs.acct == ''
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          set -euo pipefail
          EMAIL="${{ steps.parse.outputs.email }}"
          COUNTRY="${{ steps.parse.outputs.country }}"
          RES=$(curl -sS https://api.stripe.com/v1/accounts \
            -u "$STRIPE_SECRET_KEY:" \
            -d type=express \
            -d "country=$COUNTRY" \
            -d "email=$EMAIL")
          echo "$RES" | jq .
          ACCT_ID=$(echo "$RES" | jq -r .id)
          [[ -z "$ACCT_ID" || "$ACCT_ID" == "null" ]] && { echo "❌ fail create acct"; exit 1; }
          echo "acct_id=$ACCT_ID" >> $GITHUB_OUTPUT
      - name: Use existing acct if present
        id: acct2
        if: steps.map.outputs.acct != ''
        run: echo "acct_id=${{ steps.map.outputs.acct }}" >> $GITHUB_OUTPUT
      - name: Create onboarding link
        id: link
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          ACCT="${{ steps.acct.outputs.acct_id || steps.acct2.outputs.acct_id }}"
          RES=$(curl -sS https://api.stripe.com/v1/account_links \
            -u "$STRIPE_SECRET_KEY:" \
            -d account="$ACCT" \
            -d type=account_onboarding \
            -d refresh_url="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}" \
            -d return_url="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}")
          URL=$(echo "$RES" | jq -r .url)
          [[ -z "$URL" || "$URL" == "null" ]] && { echo "❌ fail create link"; echo "$RES"; exit 1; }
          echo "url=$URL" >> $GITHUB_OUTPUT
      - name: Save mapping (only if new)
        if: steps.map.outputs.acct == ''
        run: |
          ACCT="${{ steps.acct.outputs.acct_id }}"
          GH="${{ steps.parse.outputs.gh_user }}"
          tmp=$(mktemp)
          jq --arg gh "$GH" --arg acct "$ACCT" '.[$gh]=$acct' .github/contributors.json > "$tmp"
          mv "$tmp" .github/contributors.json
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add .github/contributors.json && git commit -m "chore(contrib): map $GH -> $ACCT" || true
          git push || true
      - name: Comment link
        uses: actions/github-script@v7
        with:
          script: |
            const url = `${{ toJson(steps.link.outputs.url) }}`.replace(/^"|"$/g,"");
            const body = [
              "Thanks for applying! 🎉",
              "",
              "**Onboarding link (Stripe Connect Express):**",
              url,
              "",
              "Complete KYC and you’ll be eligible for payouts.",
              "",
              "_Note: no passwords/keys in GitHub. Work in small PRs; CI must pass._"
            ].join("\n");
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body
            });
YAML

# ---------- Auto pay on PR merge (label: bounty:$AMOUNT and optional pay:@user) ----------
cat > .github/workflows/auto_pay_on_pr_merge.yml <<'YAML'
name: Auto pay on PR merge (bounty label)
on:
  pull_request:
    types: [closed]
permissions:
  contents: read
jobs:
  pay:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y jq
      - name: Resolve payee + amount
        id: info
        run: |
          labels='${{ toJson(github.event.pull_request.labels.*.name) }}'
          # Expect "bounty:\$50" or "bounty:\$50.00"
          amount=$(printf "%s" "$labels" | tr -d '"[]' | tr ',' '\n' | sed -nE 's/.*bounty:\$?([0-9]+(\.[0-9]{1,2})?).*/\1/p' | head -1)
          # Optional "pay:@user"
          payto=$(printf "%s" "$labels" | tr -d '"[]' | tr ',' '\n' | sed -nE 's/.*pay:@([A-Za-z0-9_-]+).*/\1/p' | head -1)
          [[ -z "$payto" ]] && payto='${{ github.event.pull_request.user.login }}'
          if [[ -z "$amount" ]]; then
            echo "No bounty label found (bounty:$AMOUNT). Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            cents=$(python3 - <<PY
amt="${amount}"
from decimal import Decimal
print(int(Decimal(amt)*100))
PY
)
            echo "amount_cents=$cents" >> $GITHUB_OUTPUT
            echo "payto=$payto" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      - name: Abort if skipping
        if: steps.info.outputs.skip == 'true'
        run: echo "Skipping payout."
      - name: Check payouts enabled
        if: steps.info.outputs.skip != 'true'
        run: |
          echo "PAYOUTS_ENABLED=${{ vars.STRIPE_PAYOUTS_ENABLED }}"
          test "${{ vars.STRIPE_PAYOUTS_ENABLED }}" = "true" || { echo "❌ STRIPE_PAYOUTS_ENABLED != true"; exit 1; }
      - name: Lookup Stripe account
        if: steps.info.outputs.skip != 'true'
        id: acct
        run: |
          GH="${{ steps.info.outputs.payto }}"
          ACCT=$(jq -r --arg gh "$GH" '.[$gh] // empty' .github/contributors.json)
          [[ -z "$ACCT" ]] && { echo "❌ No Stripe account mapped for $GH"; exit 1; }
          echo "acct=$ACCT" >> $GITHUB_OUTPUT
      - name: Transfer payout
        if: steps.info.outputs.skip != 'true'
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          ACCT="${{ steps.acct.outputs.acct }}"
          AMOUNT="${{ steps.info.outputs.amount_cents }}"
          MEMO="PR #${{ github.event.pull_request.number }} merged"
          RES=$(curl -sS https://api.stripe.com/v1/transfers \
            -u "$STRIPE_SECRET_KEY:" \
            -d amount="$AMOUNT" \
            -d currency="usd" \
            -d destination="$ACCT" \
            -d description="$MEMO")
          echo "$RES" | jq .
          ID=$(echo "$RES" | jq -r .id)
          [[ -z "$ID" || "$ID" == "null" ]] && { echo "❌ Transfer failed"; exit 1; }
          echo "✅ Paid $AMOUNT cents to $ACCT for $MEMO"
YAML

# ---------- Auto pay on issue close (label: pay:$AMOUNT to assignee) ----------
cat > .github/workflows/auto_pay_on_issue_close.yml <<'YAML'
name: Auto pay on issue close (pay label to assignee)
on:
  issues:
    types: [closed]
permissions:
  contents: read
jobs:
  pay:
    if: |
      contains(github.event.issue.labels.*.name, 'pay:$') || contains(join(github.event.issue.labels.*.name, ' '), 'pay:$')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y jq
      - name: Parse amount + assignee
        id: info
        run: |
          labels='${{ toJson(github.event.issue.labels.*.name) }}'
          amount=$(printf "%s" "$labels" | tr -d '"[]' | tr ',' '\n' | sed -nE 's/.*pay:\$?([0-9]+(\.[0-9]{1,2})?).*/\1/p' | head -1)
          assignee='${{ github.event.issue.assignee.login || github.event.issue.user.login }}'
          if [[ -z "$amount" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          cents=$(python3 - <<PY
amt="${amount}"
from decimal import Decimal
print(int(Decimal(amt)*100))
PY
)
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "amount_cents=$cents" >> $GITHUB_OUTPUT
          echo "payto=$assignee"     >> $GITHUB_OUTPUT
      - name: Abort if skipping
        if: steps.info.outputs.skip == 'true'
        run: echo "Skipping; no amount."
      - name: Check payouts enabled
        if: steps.info.outputs.skip != 'true'
        run: |
          echo "PAYOUTS_ENABLED=${{ vars.STRIPE_PAYOUTS_ENABLED }}"
          test "${{ vars.STRIPE_PAYOUTS_ENABLED }}" = "true" || { echo "❌ STRIPE_PAYOUTS_ENABLED != true"; exit 1; }
      - name: Lookup Stripe account
        if: steps.info.outputs.skip != 'true'
        id: acct
        run: |
          GH="${{ steps.info.outputs.payto }}"
          ACCT=$(jq -r --arg gh "$GH" '.[$gh] // empty' .github/contributors.json)
          [[ -z "$ACCT" ]] && { echo "❌ No Stripe account mapped for $GH"; exit 1; }
          echo "acct=$ACCT" >> $GITHUB_OUTPUT
      - name: Transfer payout
        if: steps.info.outputs.skip != 'true'
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          ACCT="${{ steps.acct.outputs.acct }}"
          AMOUNT="${{ steps.info.outputs.amount_cents }}"
          MEMO="Issue #${{ github.event.issue.number }} closed"
          RES=$(curl -sS https://api.stripe.com/v1/transfers \
            -u "$STRIPE_SECRET_KEY:" \
            -d amount="$AMOUNT" \
            -d currency="usd" \
            -d destination="$ACCT" \
            -d description="$MEMO")
          echo "$RES" | jq .
          ID=$(echo "$RES" | jq -r .id)
          [[ -z "$ID" || "$ID" == "null" ]] && { echo "❌ Transfer failed"; exit 1; }
          echo "✅ Paid $AMOUNT cents to $ACCT for $MEMO"
YAML

git add .github/workflows .github/contributors.json scripts
git commit -m "ops: fully-automated onboarding + payouts (PR merge & issue close) with Stripe Connect; DRY-RUN guarded" >/dev/null || true

echo "✅ Added automation on branch: $BRANCH"
echo "Next:"
echo "  1) Set secret & toggle:  ./scripts/stripe_setup.sh sk_live_xxx false"
echo "  2) Push & PR:           git push origin $BRANCH && gh pr create --fill"
echo "  3) Merge to default branch."
echo "  4) When ready to pay, enable payouts: gh variable set STRIPE_PAYOUTS_ENABLED -b true"
echo "  5) Flow:"
echo "     • Worker opens 'Join program' issue (label onboarding) → bot comments Stripe link."
echo "     • PR merged with label 'bounty:\$50' (and optional 'pay:@user') → auto-transfer."
echo "     • Issue closed with label 'pay:\$25' (assigned to worker) → auto-transfer."
