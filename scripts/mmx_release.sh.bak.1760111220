#!/usr/bin/env bash
# mmx_release.sh — build, smoke-test, and package mmx in chunks
# Usage:
#   scripts/mmx_release.sh [chunk ...]
# Chunks (run one or many; default = all):
#   build        -> cargo build (release) for host or CROSS_TARGETS
#   smoke        -> mmx --help, mmx doctor, and optional remux if in.mp4 present
#   package      -> tar.gz: mmx binary + scripts + (optional) completions/man
#   homebrew     -> generate a Homebrew formula skeleton with correct sha256
#   docker       -> build a local docker image (optional; needs Docker)
#   clean        -> remove dist/ and temp pkg dirs
#   all          -> build + smoke + package + homebrew
#
# Customization via env:
#   VERSION=1.0.0               # default auto-detected from Cargo.toml or git
#   FEATURES="mmx-core/gst"     # cargo features
#   PACKAGE_NAME="mmx"          # binary name
#   CROSS_TARGETS="x86_64-unknown-linux-musl aarch64-apple-darwin" # optional
#   INSTALL_SCRIPTS="scripts/doctor_and_remux.sh"                  # extra files to include
#   RELEASE_OWNER="yourorg"     # for Homebrew formula URL skeleton
#   RELEASE_REPO="mmx"
#   DIST_DIR="dist"

set -euo pipefail

# ---------- config & helpers ----------
PACKAGE_NAME="${PACKAGE_NAME:-mmx}"
FEATURES="${FEATURES:-mmx-core/gst}"
DIST_DIR="${DIST_DIR:-dist}"
RELEASE_OWNER="${RELEASE_OWNER:-yourorg}"
RELEASE_REPO="${RELEASE_REPO:-mmx}"
INSTALL_SCRIPTS="${INSTALL_SCRIPTS:-scripts/doctor_and_remux.sh}"

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

log(){ printf "\033[1;34m[ mmx ]\033[0m %s\n" "$*"; }
warn(){ printf "\033[1;33m[ warn ]\033[0m %s\n" "$*" >&2; }
die(){ printf "\033[1;31m[ FAIL ]\033[0m %s\n" "$*" >&2; exit 1; }

need() { command -v "$1" >/dev/null 2>&1 || die "missing '$1'"; }

sha256() {
  if command -v shasum >/dev/null 2>&1; then
    shasum -a 256 "$1" | awk '{print $1}'
  elif command -v sha256sum >/dev/null 2>&1; then
    sha256sum "$1" | awk '{print $1}'
  else
    openssl dgst -sha256 "$1" | awk '{print $2}'
  fi
}

host_triple() {
  if command -v rustc >/dev/null 2>&1; then
    rustc -vV | awk -F': ' '/host/ {print $2; exit}'
  else
    case "$(uname -s)/$(uname -m)" in
      Darwin/arm64) echo "aarch64-apple-darwin" ;;
      Darwin/x86_64) echo "x86_64-apple-darwin" ;;
      Linux/x86_64) echo "x86_64-unknown-linux-gnu" ;;
      Linux/aarch64) echo "aarch64-unknown-linux-gnu" ;;
      *) echo "unknown-unknown-unknown" ;;
    esac
  fi
}

trip_to_name() {
  case "$1" in
    *apple-darwin)      echo "${PACKAGE_NAME}-macos-${1%%-*}" ;;
    *linux-musl)        echo "${PACKAGE_NAME}-linux-${1%%-*}-musl" ;;
    *unknown-linux-gnu) echo "${PACKAGE_NAME}-linux-${1%%-*}" ;;
    *windows-msvc)      echo "${PACKAGE_NAME}-windows-${1%%-*}" ;;
    *)                  echo "${PACKAGE_NAME}-${1}" ;;
  esac
}

detect_version() {
  if [[ -n "${VERSION:-}" ]]; then
    echo "$VERSION"; return
  fi
  if [[ -f "$ROOT/mmx-cli/Cargo.toml" ]]; then
    awk -F' = ' '/^version =/ {gsub(/"/,"",$2); print $2; exit}' "$ROOT/mmx-cli/Cargo.toml" || true
  fi
}

# ---------- chunks ----------
chunk_build() {
  need cargo
  local targets=()
  if [[ -n "${CROSS_TARGETS:-}" ]]; then
    read -r -a targets <<<"$CROSS_TARGETS"
  else
    targets=($(host_triple))
  fi

  log "Building (features: ${FEATURES}) for targets: ${targets[*]}"
  for t in "${targets[@]}"; do
    [[ "$t" == "unknown-unknown-unknown" ]] && die "could not detect host triple; install rustc"
    log "→ cargo build --release --target $t"
    (cd "$ROOT" && cargo build -p mmx-cli -F "$FEATURES" --release --target "$t")
  done
}

chunk_smoke() {
  log "Smoke tests (host) …"
  local host; host="$(host_triple)"
  local bin="$ROOT/target/${host}/release/${PACKAGE_NAME}"
  [[ -x "$bin" ]] || bin="$ROOT/target/release/${PACKAGE_NAME}"
  [[ -x "$bin" ]] || die "binary not found; run build first"

  "$bin" --help >/dev/null || die "--help failed"
  "$bin" doctor >/dev/null || die "doctor failed"

  if [[ -f "$ROOT/in.mp4" ]]; then
    log "remux smoke (in.mp4 present)"
    "$bin" remux --input "$ROOT/in.mp4" --output "$ROOT/out_copy.mp4" --ss 0 --to 1 --stream-map "0:v:0,0:a?,0:s?" || die "remux failed"
    [[ -f "$ROOT/out_copy.mp4" ]] || die "remux did not produce out_copy.mp4"
  else
    warn "skipping remux smoke (no in.mp4 at repo root)"
  fi
  log "Smoke OK"
}

chunk_package() {
  local version; version="$(detect_version)"
  [[ -n "$version" ]] || version="0.0.0-dev"
  mkdir -p "$ROOT/$DIST_DIR"
  log "Packaging version v$version …"

  local targets=()
  if [[ -n "${CROSS_TARGETS:-}" ]]; then
    read -r -a targets <<<"$CROSS_TARGETS"
  else
    targets=($(host_triple))
  fi

  for t in "${targets[@]}"; do
    local bin_dir="$ROOT/target/$t/release"
    local exe="$bin_dir/$PACKAGE_NAME"
    [[ -x "$exe" ]] || exe="$bin_dir/${PACKAGE_NAME}.exe"
    [[ -x "$exe" ]] || { warn "skip $t (binary not found)"; continue; }

    local name; name="$(trip_to_name "$t")"
    local pkg_dir="$ROOT/target/pkg/$name"
    rm -rf "$pkg_dir"
    mkdir -p "$pkg_dir"

    cp "$exe" "$pkg_dir/$PACKAGE_NAME"

    if [[ -d "$ROOT/target/pkg/completions" ]]; then
      mkdir -p "$pkg_dir/completions"
      cp -R "$ROOT/target/pkg/completions/." "$pkg_dir/completions/"
    fi
    if [[ -d "$ROOT/target/pkg/man" ]]; then
      mkdir -p "$pkg_dir/man"
      cp -R "$ROOT/target/pkg/man/." "$pkg_dir/man/"
    fi

    [[ -f "$ROOT/README.md" ]] && cp "$ROOT/README.md" "$pkg_dir/README.md"
    [[ -f "$ROOT/LICENSE" ]] && cp "$ROOT/LICENSE" "$pkg_dir/LICENSE"
    for f in $INSTALL_SCRIPTS; do
      [[ -f "$ROOT/$f" ]] && { mkdir -p "$pkg_dir/scripts"; cp "$ROOT/$f" "$pkg_dir/scripts/"; }
    done

    local tar="$ROOT/$DIST_DIR/${name}.tar.gz"
    (cd "$pkg_dir/.." && tar -czf "$tar" "$name")
    local sum; sum="$(sha256 "$tar")"
    echo "$sum  $(basename "$tar")" > "$tar.sha256"
    log "Packed $(basename "$tar") (sha256: $sum)"
  done
}

chunk_homebrew() {
  local version; version="$(detect_version)"
  [[ -n "$version" ]] || version="0.0.0-dev"
  need awk

  mkdir -p "$ROOT/$DIST_DIR/homebrew"
  local rb="$ROOT/$DIST_DIR/homebrew/${PACKAGE_NAME}.rb"

  local any_tar; any_tar="$(ls "$ROOT/$DIST_DIR"/${PACKAGE_NAME}-*.tar.gz 2>/dev/null | head -n1 || true)"
  if [[ -z "$any_tar" ]]; then
    warn "no tarballs found in $DIST_DIR — run 'package' chunk first"
  fi

  cat >"$rb" <<RUBY
class ${PACKAGE_NAME^} < Formula
  desc "Media swiss-army CLI (doctor, remux, probe, run, pack, qc)"
  homepage "https://github.com/$RELEASE_OWNER/$RELEASE_REPO"
  version "$version"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/$RELEASE_OWNER/$RELEASE_REPO/releases/download/v$version/${PACKAGE_NAME}-macos-aarch64.tar.gz"
      sha256 "$(grep "${PACKAGE_NAME}-macos-aarch64.tar.gz" "$DIST_DIR"/*.sha256 2>/dev/null | awk '{print $1}')"
    else
      url "https://github.com/$RELEASE_OWNER/$RELEASE_REPO/releases/download/v$version/${PACKAGE_NAME}-macos-x86_64.tar.gz"
      sha256 "$(grep "${PACKAGE_NAME}-macos-x86_64.tar.gz" "$DIST_DIR"/*.sha256 2>/dev/null | awk '{print $1}')"
    end
  end

  on_linux do
    url "https://github.com/$RELEASE_OWNER/$RELEASE_REPO/releases/download/v$version/${PACKAGE_NAME}-linux-x86_64-musl.tar.gz"
    sha256 "$(grep "${PACKAGE_NAME}-linux-x86_64-musl.tar.gz" "$DIST_DIR"/*.sha256 2>/dev/null | awk '{print $1}')"
  end

  depends_on "ffmpeg"

  def install
    bin.install "mmx"
    if File.exist? "completions/mmx.bash"
      bash_completion.install "completions/mmx.bash" => "mmx"
    end
    if File.exist? "completions/_mmx"
      zsh_completion.install  "completions/_mmx"
    end
    if File.exist? "completions/mmx.fish"
      fish_completion.install "completions/mmx.fish"
    end
    if File.exist? "man/mmx.1"
      man1.install "man/mmx.1"
    end
  end

  test do
    system "#{bin}/mmx", "--help"
  end
end
RUBY

  log "Homebrew formula skeleton written to: $rb"
  log "Edit URLs or set RELEASE_OWNER/RELEASE_REPO before publishing."
}

chunk_docker() {
  if ! command -v docker >/dev/null 2>&1; then
    warn "docker not found; skipping docker image"
    return 0
  fi
  local df="$ROOT/$DIST_DIR/Dockerfile"
  cat >"$df" <<'DOCKER'
FROM debian:bookworm-slim
RUN apt-get update && apt-get install -y --no-install-recommends ffmpeg gstreamer1.0-tools ca-certificates && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY mmx /usr/local/bin/mmx
ENTRYPOINT ["mmx"]
CMD ["--help"]
DOCKER

  local tar
  tar="$(ls "$ROOT/$DIST_DIR"/${PACKAGE_NAME}-linux-*tar.gz 2>/dev/null | head -n1 || true)"
  if [[ -z "$tar" ]]; then
    warn "no linux tarball found in $DIST_DIR; run 'package' with a linux target";
    return 0
  fi
  local tmpdir; tmpdir="$(mktemp -d)"
  tar -xzf "$tar" -C "$tmpdir"
  local mmx_path; mmx_path="$(find "$tmpdir" -type f -name "$PACKAGE_NAME" | head -n1 || true)"
  [[ -x "$mmx_path" ]] || { warn "cannot extract mmx from tarball $tar"; return 0; }

  cp "$mmx_path" "$ROOT/$DIST_DIR/mmx"
  (cd "$DIST_DIR" && docker build -t mmx:local .)
  log "Docker image built: mmx:local (try: docker run --rm mmx:local --help)"
  rm -f "$ROOT/$DIST_DIR/mmx"
}

chunk_clean() {
  rm -rf "$ROOT/$DIST_DIR" "$ROOT/target/pkg"
  log "Cleaned $DIST_DIR and target/pkg"
}

# ---------- dispatcher ----------
chunks=("$@")
[[ ${#chunks[@]} -eq 0 ]] && chunks=(all)

for c in "${chunks[@]}"; do
  case "$c" in
    build)     chunk_build ;;
    smoke)     chunk_smoke ;;
    package)   chunk_package ;;
    homebrew)  chunk_homebrew ;;
    docker)    chunk_docker ;;
    clean)     chunk_clean ;;
    all)       chunk_build; chunk_smoke; chunk_package; chunk_homebrew ;;
    *) die "unknown chunk: $c" ;;
  esac
done

log "Done."
